var timerValue = 0; // переменная для хранения значения таймера
var timerValueInText = ''; // переменная для хранения значения таймера в текстовом фиде, в формате hh:mm:ss, для показа на дисплее таймера
var timerId = null; // переменная для хранения идентификатора таймера
var startBtn; // переменная для хранения ссылки на объект кнопки (button) запуска таймера
var alarmSound; // переменная для хранения аудио файла для оповещения об окончании работы таймера
var tickSound; // переменная для хранения аудио файла для работающего каждую секунду

/*
 * Функция инициализации модуля Timer.
 * Данная функция запускается после загрузки модуля.
 */
function init() {
  // получаем ссылку на объект кнопки (button) запуска таймера
  startBtn = document.getElementById("timerStartBtn");

  if (startBtn) {
    // если ссылка на объект кнопки запуска таймера не пустая,
    // то добавляем обработчик события нажатия на кнопку
    startBtn.addEventListener('click', () => startTimer());
  }

  // получаем ссылку на объект кнопки (button) остановки таймера
  let el = document.getElementById("timerStopBtn");

  if (el) {
    // если ссылка на объект кнопки остановки таймера не пустая,
    // то добавляем обработчик события нажатия на кнопку
    el.addEventListener('click', () => stopTimer());
  }

  alarmSound = new Howl({
    src: ['/snd/alarm.wav'] //
  });

  tickSound = new Howl({
    src: ['/snd/tick.wav'] //
  });
}

/*
 * Функция запуска таймера.
 * Данная функция запускается после нажатия пользователем кнопки Start
 */
export function startTimer() {
  // Очищаем дисплей таймера
  showTextOnTimerDisplay('');

  // получаем ссылку на объект ввода (input) значения таймера
  let el = document.getElementById('timerStartValue');

  if (!el) {
    // если ссылка на объект ввода (input) значения таймера пустая,
    // то просто выходим из функции
    return;
  }

  // получаем начальное значение минут для таймера, введённое пользователем
  timerValue = el.value;

  if (!timerValue || timerValue <= 0) {
    // если начальное значение минут для таймера пусто или меньше или равно нулю,
    // то выводим на дисплей таймера сообщение об ошибке и выходим из функции
    showTextOnTimerDisplay('<span class="timer_err">ОШИБКА:</span><span class="timer_err-text">Значение минут должно быть больше 0</span>')
    return;
  }

  // иначе ...

  // блокируем повторное нажатие кнопки Start,
  // во избежание дублирования экземпляров таймеров в браузере
  startBtn.disabled = true;
  // переводим минуты в секунды
  timerValue = timerValue * 60;
  // переводим значение таймера в текстовый вид формата hh:mm:ss
  timerValueToText();
  // выводим на дисплей начальное значение таймера
  showTextOnTimerDisplay(`<span class="timer_value-text">${timerValueInText}</span>`)
  // запускаем обратный отсчёт каждую секунду обновляя дисплей таймера,
  // а также запоминаем идентификатор таймера в переменную timerId, для его последующей остановки
  timerId = setInterval(() => {
    if (tickSound) {
      // если переменная tickSound определена,
      // то запускаем проигрывание аудио файла каждую секунду
      tickSound.play();
    }

    // уменьшаем значение таймера на одну секунду
    timerValue--;
    // переводим значение таймера в текстовый вид формата hh:mm:ss
    timerValueToText();
    // выводим на дисплей таймера текущее значение таймера
    showTextOnTimerDisplay(`<span class="timer_value-text">${timerValueInText}</span>`)

    if (timerValue <= 0) {
      // если таймер достиг 0
      // то отменяем таймер
      clearInterval(timerId);
      // идентификатор таймера делаем неопределённым
      timerId = null;
      // разблокируем, ранее заблокированную кнопку Start, для возможности её повторного использования
      startBtn.disabled = false;
      // выводим на дисплей таймера сообщение о том, что заданное время таймеру истекло
      showTextOnTimerDisplay('<span class="timer_stop-text">Время вышло!</span>')

      if (alarmSound) {
        // если переменная alarmSound определена,
        // то запускаем проигрывание аудио файла об окончании таймера
        alarmSound.play();
      }
    }
  }, 1000);
}

/*
 * Функция остановки таймера.
 * Данная функция запускается после нажатия пользователем кнопки Stop
 */
export function stopTimer() {
  // Очищаем дисплей таймера
  showTextOnTimerDisplay('<span class="timer_stop-text">Таймер остановлен</span>')

  if (startBtn) {
    // если ссылка на объект кнопки (button) запуска таймера определена,
    // то разблокируем, ранее заблокированную кнопку Start, для возможности её повторного использования
    startBtn.disabled = false;
  }

  if (!timerId) {
    // если идентификатор таймера неопределён,
    // то просто выходим из функции
    return;
  }

  // иначе отменяем таймер
  clearInterval(timerId);
  // идентификатор таймера делаем неопределённым
  timerId = null;
}

/*
 * Функция для отображения текста на дисплее таймера.
 */
function showTextOnTimerDisplay(text) {
  // получаем ссылку на объект дисплея таймера (div)
  let el = document.getElementById('timerDisplay');

  if (!el) {
    // если ссылка на объект дисплея таймера (div) пустая,
    // то просто выходим из функции
    return;
  }

  // иначе выводим текст из переменной text на дисплей таймера
  el.innerHTML = text;
}

/*
 * Функция для перевода значения таймера в текстовый вид формата: hh:mm:ss
 */
function timerValueToText() {
  // получаем значение часов оставшихся у таймера
  let hours = Math.trunc(timerValue / 3600);
  // получаем значение минут оставшихся у таймера
  let minutes = Math.trunc(timerValue % 3600 / 60);
  // получаем значение секунд оставшихся у таймера
  let seconds = timerValue - hours * 3600 - minutes * 60;
  timerValueInText = `${hours}:${padStart(minutes)}:${padStart(seconds)}`;
}

/*
 * Функция для добавления незначещего нуля перед минутами или секундами,
 * для получения чисел типа 01, 02, 03 и т.д.
 */
function padStart(value) {
  if (value == null) {
    // если значение параметра функции неопределёно,
    // то возвращаем 00
    return '00';
  }

  if (value >= 0 && value <= 9) {
    // если значение параметра функции в пределах от 0 до 9,
    // то добавляем незначащий 0 перед значением и возвращаем результат
    return `0${value}`;
  }

  // иначе возвращаем результат без изменений в текстовом виде
  return `${value}`;
}

// Запускаем функцию инициализации модуля Timer
init();
